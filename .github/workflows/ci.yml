name: Java CI

on:
  pull_request:
    branches: ['**']

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      artifact-name: build-logs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: '11'

      - name: Prepare artifacts dir
        run: mkdir -p artifacts/ci
      
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build & Test with Gradle
        id: gradle
        run: |
          # run Gradle, capture stdout+stderr to artifacts/ci/build.log (will exist even if gradle fails)
          ./gradlew clean test 2>&1 | tee artifacts/ci/build.log
          GRADLE_EXIT=${PIPESTATUS[0]}
          if [ $GRADLE_EXIT -ne 0 ]; then
            echo "Gradle failed with exit code $GRADLE_EXIT"
            exit $GRADLE_EXIT
          fi

      # Upload artifact only on failure of the job
      - name: Upload logs for analyzer (only on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: artifacts/ci

  analyze:
    name: Pipeline Analyzer
    runs-on: ubuntu-latest
    needs: build
    # run this job only if the build job concluded with 'failure'
    if: ${{ always() && (needs.build.result == 'failure' || needs.build.conclusion == 'failure') }}
    steps:
      - name: Checkout (for analyzer code)
        uses: actions/checkout@v4

      - name: Download build logs artifact
        uses: actions/download-artifact@v4
        with:
          name: build-logs
          path: artifacts/ci

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install analyzer requirements
        run: |
          python -m pip install --upgrade pip
          pip install dspy pyyaml

      - name: Run pipeline analyzer (Gemini/DSPy or fallback)
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.AGENTIC_GITHUB_TOKEN }}
        run: |
          # ensure analyzer accepts --artifacts and --output
          python -u agents/pipeline_rca.py --artifacts artifacts/ci --output pipeline_report.md 
          echo "=== pipeline_report.md (first 200 lines) ==="
          sed -n '1,200p' pipeline_report.md 

      - name: Post pipeline report to PR
        # uses GitHub token via the action context
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.AGENTIC_GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const repo = context.repo.owner + '/' + context.repo.repo;
            // find current PR number that triggered the workflow
            const prNumber = context.payload.pull_request?.number || (process.env.PR_NUMBER && parseInt(process.env.PR_NUMBER));
            if (!prNumber) {
              core.info("No PR number found in context â€” skipping posting report.");
            } else {
              let body = "### ðŸ¤– Pipeline Failure Report\n\n";
              try {
                const md = fs.readFileSync('pipeline_report.md', {encoding:'utf8'});
                // truncate to avoid posting extremely large comments
                const snippet = md.length > 12000 ? md.slice(0,12000) + "\n\n*(truncated)*" : md;
                body += "```\n" + snippet + "\n```\n";
              } catch (err) {
                body += "_No pipeline_report.md found or could not read file._\n";
              }
              // post PR comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body
              });
              core.info("Posted pipeline report to PR #" + prNumber);
            }
